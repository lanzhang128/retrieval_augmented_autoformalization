{"text": "text\\<open>A dual notion to \\<open>Tail\\<close> is the list\n  of all elements of a list except the last one. Borrowing\n  the terminology from Haskell again, we will call this \\<open>Init\\<close>.\\<close>\n", "informal": " Init(a) is equivalent to the restriction of a to its domain and application to its predicate.\n\nOr more succinctly: Init(a) <={x. a x} ={x. pred x}\n\nHere, \"Init\" is a shorthand or definition name, \"a\" is a set, \"x\" is an arbitrary element, and \"pred\" is the predicate operator. The symbol <={ .. } ={ .. } represents set equality, and { .. } denotes the set literals. Thus, Init(a) restricted to its domain and applied to its predicate yields the same elements as the original set a.", "statement": "definition\n  \"Init(a) \\<equiv> restrict(a,pred(domain(a)))\"\n"}