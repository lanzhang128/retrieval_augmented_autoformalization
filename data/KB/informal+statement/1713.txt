{"informal": " Assuming `k` is a natural number, `a, b, c` are functions from `succ(succ(k))` to `G`, and for all `j` in `succ(succ(k)), c(j) = a(j) * b(j)`, we have:\n\n- `Init(a)` is a function from `succ(k)` to `G`, and `Init(a)` belongs to `G`.\n- `Init(b)` is a function from `succ(k)` to `G`, and `Init(b)` belongs to `G`.\n- `Init(c)` is a function from `succ(k)` to `G`, and `Init(c)` belongs to `G`.\n- For all `j` in `succ(k), Init(c)(j) = Init(a)(j) * Init(b)(j)`.", "statement": "lemma (in semigr0) prod_distr_ind_step:\n  assumes A1: \"k \\<in> nat\" and\n  A2: \"a : succ(succ(k)) \\<rightarrow> G\" and\n  A3: \"b : succ(succ(k)) \\<rightarrow> G\" and\n  A4: \"c : succ(succ(k)) \\<rightarrow> G\" and\n  A5: \"\\<forall>j\\<in>succ(succ(k)). c`(j) = a`(j) \\<cdot> b`(j)\"\n  shows\n  \"Init(a) : succ(k) \\<rightarrow> G\"\n  \"Init(b) : succ(k) \\<rightarrow> G\"\n  \"Init(c) : succ(k) \\<rightarrow> G\"\n  \"\\<forall>j\\<in>succ(k). Init(c)`(j) = Init(a)`(j) \\<cdot> Init(b)`(j)\"\n"}